<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[IDEA Mybatis Plugin3 之后的破解方法(转)]]></title>
    <url>%2F2017%2F12%2F28%2FIDEA-Mybatis-Plugin3-%E4%B9%8B%E5%90%8E%E7%9A%84%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95-%E8%BD%AC%2F</url>
    <content type="text"><![CDATA[本文破解方法适用于Mybatis Plugin 3 之后的版本。 大致思路新版的Mybatis Plugin采用zkm混淆了，反编译不能直接看到代码实现，破解难度大大增加。zkm混淆的大概思路就是将源代码中的包名、类名重新编排。源代码类中直接赋值的字符串，混淆后变为通过静态代码块、构造函数、组合调用其他方法来初始化。反编译后将代码简单修改还是能够得出原文的字符串的。 工具准备 procyon-decompiler 文本内容搜索工具，类Unix系统可以直接通过grep命令 javassist（字节码修改工具） 破解方法反编译jar12345678910111213java -jar procyon-decompiler-0.5.30.jar -o output/ ~/Desktop/iMybatis-3.154.jar...此处省略N行...Decompiling com/s7/mybatis/a/c...Decompiling com/s7/mybatis/a/d...Decompiling com/s7/mybatis/a/a...Decompiling com/s7/mybatis/a/e...Decompiling com/s7/mybatis/a/f...Decompiling com/s7/mybatis/a/g...Decompiling com/s7/mybatis/a/b...Decompiling com/s7/mybatis/b/h...Decompiling com/s7/mybatis/b/t......此处省略N行... 寻找线索由于插件的注册是要走网络的，可以搜索反编译的代码中与网络相关的一些包名，常见的工具类名。例如：http，URL，Socket等等，找到一个线索类，剩下的就是体力活了，从该类进行关联阅读基本就可以得出注册的逻辑了。 搜索反编译后的文本关键字12345678910111213141516grep -R &apos;http&apos; outputoutput/com/s7/mybatis/e/ar.java:import org.apache.http.util.EntityUtils;output/com/s7/mybatis/e/ar.java:import org.apache.http.client.methods.HttpUriRequest;output/com/s7/mybatis/e/ar.java:import org.apache.http.conn.socket.LayeredConnectionSocketFactory;output/com/s7/mybatis/e/ar.java:import org.apache.http.conn.ssl.SSLConnectionSocketFactory;output/com/s7/mybatis/e/ar.java:import org.apache.http.ssl.SSLContextBuilder;output/com/s7/mybatis/e/ar.java:import org.apache.http.impl.client.HttpClients;output/com/s7/mybatis/e/ar.java:import org.apache.http.HttpEntity;output/com/s7/mybatis/e/ar.java:import org.apache.http.entity.StringEntity;output/com/s7/mybatis/e/ar.java:import org.apache.http.entity.ContentType;output/com/s7/mybatis/e/ar.java:import org.apache.http.client.config.RequestConfig;output/com/s7/mybatis/e/ar.java:import org.apache.http.client.methods.HttpPost;output/com/s7/mybatis/e/ar.java: final HttpPost httpPost = new HttpPost(this.a.b);output/com/s7/mybatis/e/ar.java: httpPost.setConfig(RequestConfig.custom().setConnectTimeout(20000).setConnectionRequestTimeout(20000).setSocketTimeout(20000).build());output/com/s7/mybatis/e/ar.java: httpPost.setEntity((HttpEntity)new StringEntity(G.b.a(jsonObject), ContentType.APPLICATION_JSON));output/com/s7/mybatis/e/ar.java: final String string = EntityUtils.toString(HttpClients.custom().setSSLSocketFactory((LayeredConnectionSocketFactory)new SSLConnectionSocketFactory(new SSLContextBuilder().loadTrustMaterial((KeyStore)null, ar::lambda$execute$0).build())).build().execute((HttpUriRequest)httpPost).getEntity()); 到这里是不是看到了一丝线索？剩下的就是顺着这个线索类，阅读反编译的源代码来猜测大致的逻辑就可以了。procyon-decompiler有的类可能会解析失败，这就需要把常用的反编译工具组合起来分析。例如：JD-GUI，Luyten，详情可以看我的另一篇博文：IDEA Iedis Plugin 2.41 破解方法。不多说了，直接给出最终代码~ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495import javassist.ClassPool;import javassist.CtClass;import javassist.CtMethod;import javassist.NotFoundException;import org.junit.Test;/** * Created by fengyiwei on 2017/11/05. */public class CrackMyBatisIdeaPlugin3154 &#123; public ClassPool pool = ClassPool.getDefault(); @Test public void test() throws NotFoundException &#123; pool.insertClassPath("/Users/fengyiwei/Desktop/iMybatis-3.154.jar"); CtClass m = pool.get("com.s7.mybatis.e.m"); CtClass ar = pool.get("com.s7.mybatis.e.ar"); CtClass h = pool.get("com.s7.mybatis.e.h"); CtClass S = pool.get("com.s7.mybatis.e.S"); CtClass an = pool.get("com.s7.mybatis.e.an"); CtClass ao = pool.get("com.s7.mybatis.e.ao"); pool.importPackage("com.google.gson.JsonObject;"); pool.importPackage("com.intellij.openapi.diagnostic.Logger;"); pool.importPackage("com.intellij.openapi.project.Project;"); try &#123; // productId // productVersion // sha // valid CtMethod ct = m.getDeclaredMethod("a", new CtClass[]&#123;pool.get("java.lang.String")&#125;); ct.setBody("&#123;" + " com.google.gson.JsonObject var3 = new com.google.gson.JsonObject();\n" + " var3.addProperty(\"productId\", Integer.valueOf(1));\n" + " var3.addProperty(\"productVersion\", \"3.154\");\n" + " return true;\n" + " &#125;"); ct = ar.getDeclaredMethod("a", new CtClass[]&#123;pool.get("com.google.gson.JsonObject")&#125;); ct.setBody("&#123;" + " com.google.gson.JsonObject v3 = new com.google.gson.JsonObject();\n" + " v3.addProperty(\"valid\", \"true\");\n" + " return v3;\n" + " &#125;"); ct = h.getDeclaredMethod("onSuccess"); ct.setBody("&#123;com.s7.mybatis.e.ao.h(\"Success\");&#125;"); ct = h.getDeclaredMethod("onThrowable"); ct.setBody("&#123; &#125;"); ct = S.getDeclaredMethod("a"); ct.setBody("&#123; return com.s7.mybatis.e.ao.g(\"1111111\"); &#125;"); ct = an.getDeclaredMethod("l"); ct.setBody("&#123;" + " com.google.gson.JsonObject jsonObject = new com.google.gson.JsonObject();\n" + " jsonObject.addProperty(\"pid\", com.s7.mybatis.e.an.d());\n" + " jsonObject.addProperty(\"userId\", com.s7.mybatis.e.an.e());\n" + " jsonObject.addProperty(\"version\", com.s7.mybatis.e.ac.b());\n" + " return jsonObject;" + " &#125;"); ct = ao.getDeclaredMethod("d"); ct.setBody("&#123;" + " com.google.gson.JsonObject jsonObject = com.s7.mybatis.e.an.l();\n" + " jsonObject.addProperty(\"license\", \"Cracked_By_Freeway\");\n" + " return new com.s7.mybatis.e.j(true, \"Freeway\");" + " &#125;"); ct = ao.getDeclaredMethod("b", new CtClass[]&#123;&#125;); ct.setBody("&#123;" + " return new com.s7.mybatis.e.ai(false, 365, true, true);" + " &#125;"); ct = ao.getDeclaredMethod("a", new CtClass[]&#123;&#125;); ct.setBody("&#123;" + " if (com.s7.mybatis.e.an.c().compareAndSet(false, true)) &#123;\n" + " new Thread(new com.s7.mybatis.e.af()).start();" + " &#125;" + " &#125;"); m.writeFile("/Users/fengyiwei/Desktop/"); ar.writeFile("/Users/fengyiwei/Desktop/"); h.writeFile("/Users/fengyiwei/Desktop/"); S.writeFile("/Users/fengyiwei/Desktop/"); an.writeFile("/Users/fengyiwei/Desktop/"); ao.writeFile("/Users/fengyiwei/Desktop/"); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 切勿用于非法用途，转载自https://www.awei.org/2017/11/08/idea-mybatis-plugin-3-21-po-jie-fang-fa/, 感谢原作者。]]></content>
      <tags>
        <tag>IDEA</tag>
        <tag>Mybatis Plugin</tag>
        <tag>Mybatis</tag>
        <tag>Crack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA mybatis plugin 辅助工具 ideaagent(转)]]></title>
    <url>%2F2017%2F12%2F28%2FIDEA-mybatis-plugin-%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7-ideaagent-%E8%BD%AC%2F</url>
    <content type="text"><![CDATA[IntelliJ IDEA 是本人常用的IDE之一，其中有两款插件特别好用，Mybatis plugin 和 Iedis，由于不是免费的，所以制作了本工具来绕过限制。 ideaagent 下载 https://github.com/mrshawnho/ideaagent 插件分析Mybatis plugin v3.423.42 使用 Kotlin 开发，代码做了混淆，更变态的是将核心代码藏在了 mybatis-generator-core-1.3.5.jar包中的 DeleteByPrimaryKeyElementGenerator.class 文件中以供插件运行时动态加载，对修改插件字节码而达到目的增加了一定难度。 继续分析后发现插件是通过服务端请求认证的，那么我们修改为本地认证就好啦，最初以为改改hosts文件伪造请求就可以了，但没那么简单，内容通过了RSA加密与验签，没有私钥是徒劳的，那么暴力点把公钥改了，皆大欢喜！ Iedis v2.432.43 只是做了代码混淆，同上的思路也能达到目的。 技术实现 通过 java instrumentation 技术创建 IDEA 的代理程序 使用 javassist 动态修改代码 使用 vert.x 创建本地 http 认证服务器 使用方法 解压到 ${dir} 添加到 IDEA VM options 末尾 (IDEA Help &gt; Edit Custom VM Options…) 1-javaagent:$&#123;dir&#125;/ideaagent-1.0-jar-with-dependencies.jar 重启 IDEA 测试环境 Windows 10 &amp;&amp; MacOS Sierra JDK 1.8 IDEA 2017 3.1 切勿用于非法用途，转载自http://shawnho.me/2017/12/20/ideaagent/, 感谢原作者。]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>Mybatis Plugin</tag>
        <tag>Mybatis</tag>
        <tag>Crack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 8系列之重新认识HashMap(转)]]></title>
    <url>%2F2017%2F06%2F08%2FJava-8%E7%B3%BB%E5%88%97%E4%B9%8B%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86HashMap-%E8%BD%AC%2F</url>
    <content type="text"><![CDATA[摘要HashMap是Java程序员使用频率最高的用于映射(键值对)处理的数据类型。随着JDK（Java Developmet Kit）版本的更新，JDK1.8对HashMap底层的实现进行了优化，例如引入红黑树的数据结构和扩容的优化等。本文结合JDK1.7和JDK1.8的区别，深入探讨HashMap的结构实现和功能原理。 简介Java为数据结构中的映射定义了一个接口java.util.Map，此接口主要有四个常用的实现类，分别是HashMap、Hashtable、LinkedHashMap和TreeMap，类继承关系如下图所示： 下面针对各个实现类的特点做一些说明： (1) HashMap：它根据键的hashCode值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的。 HashMap最多只允许一条记录的键为null，允许多条记录的值为null。HashMap非线程安全，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。如果需要满足线程安全，可以用 Collections的synchronizedMap方法使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。 (2) Hashtable：Hashtable是遗留类，很多映射的常用功能与HashMap类似，不同的是它承自Dictionary类，并且是线程安全的，任一时间只有一个线程能写Hashtable，并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。Hashtable不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换。 (3) LinkedHashMap：LinkedHashMap是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。 (4) TreeMap：TreeMap实现SortedMap接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。如果使用排序的映射，建议使用TreeMap。在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时抛出java.lang.ClassCastException类型的异常。 对于上述四种Map类型的类，要求映射中的key是不可变对象。不可变对象是该对象在创建后它的哈希值不会被改变。如果对象的哈希值发生变化，Map对象很可能就定位不到映射的位置了。 通过上面的比较，我们知道了HashMap是Java的Map家族中一个普通成员，鉴于它可以满足大多数场景的使用条件，所以是使用频度最高的一个。下文我们主要结合源码，从存储结构、常用方法分析、扩容以及安全性等方面深入讲解HashMap的工作原理。 内部实现搞清楚HashMap，首先需要知道HashMap是什么，即它的存储结构-字段；其次弄明白它能干什么，即它的功能实现-方法。下面我们针对这两个方面详细展开讲解。 存储结构-字段从结构实现来讲，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下如所示。 这里需要讲明白两个问题：数据底层具体存储的是什么？这样的存储方式有什么优点呢？ (1) 从源码可知，HashMap类中有一个非常重要的字段，就是 Node[] table，即哈希桶数组，明显它是一个Node的数组。我们来看Node[JDK1.8]是何物。 1234567891011121314static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123; final int hash; //用来定位数组索引位置 final K key; V value; Node&lt;K,V&gt; next; //链表的下一个node Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123; ... &#125; public final K getKey()&#123; ... &#125; public final V getValue() &#123; ... &#125; public final String toString() &#123; ... &#125; public final int hashCode() &#123; ... &#125; public final V setValue(V newValue) &#123; ... &#125; public final boolean equals(Object o) &#123; ... &#125;&#125; Node是HashMap的一个内部类，实现了Map.Entry接口，本质是就是一个映射(键值对)。上图中的每个黑色圆点就是一个Node对象。 (2) HashMap就是使用哈希表来存储的。哈希表为解决冲突，可以采用开放地址法和链地址法等来解决问题，Java中HashMap采用了链地址法。链地址法，简单来说，就是数组加链表的结合。在每个数组元素上都一个链表结构，当数据被Hash后，得到数组下标，把数据放在对应下标元素的链表上。例如程序执行下面代码： 1map.put("美团","小美"); 系统将调用”美团”这个key的hashCode()方法得到其hashCode 值（该方法适用于每个Java对象），然后再通过Hash算法的后两步运算（高位运算和取模运算，下文有介绍）来定位该键值对的存储位置，有时两个key会定位到相同的位置，表示发生了Hash碰撞。当然Hash算法计算结果越分散均匀，Hash碰撞的概率就越小，map的存取效率就会越高。 如果哈希桶数组很大，即使较差的Hash算法也会比较分散，如果哈希桶数组数组很小，即使好的Hash算法也会出现较多碰撞，所以就需要在空间成本和时间成本之间权衡，其实就是在根据实际情况确定哈希桶数组的大小，并在此基础上设计好的hash算法减少Hash碰撞。那么通过什么方式来控制map使得Hash碰撞的概率又小，哈希桶数组（Node[] table）占用空间又少呢？答案就是好的Hash算法和扩容机制。 在理解Hash和扩容流程之前，我们得先了解下HashMap的几个字段。从HashMap的默认构造函数源码可知，构造函数就是对下面几个字段进行初始化，源码如下： 1234int threshold; // 所能容纳的key-value对极限 final float loadFactor; // 负载因子int modCount; int size; 首先，Node[] table的初始化长度length(默认值是16)，Load factor为负载因子(默认值是0.75)，threshold是HashMap所能容纳的最大数据量的Node(键值对)个数。threshold = length * Load factor。也就是说，在数组定义好长度之后，负载因子越大，所能容纳的键值对个数越多。 结合负载因子的定义公式可知，threshold就是在此Load factor和length(数组长度)对应下允许的最大元素数目，超过这个数目就重新resize(扩容)，扩容后的HashMap容量是之前容量的两倍。默认的负载因子0.75是对空间和时间效率的一个平衡选择，建议大家不要修改，除非在时间和空间比较特殊的情况下，如果内存空间很多而又对时间效率要求很高，可以降低负载因子Load factor的值；相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子loadFactor的值，这个值可以大于1。 size这个字段其实很好理解，就是HashMap中实际存在的键值对数量。注意和table的长度length、容纳最大键值对数量threshold的区别。而modCount字段主要用来记录HashMap内部结构发生变化的次数，主要用于迭代的快速失败。强调一点，内部结构发生变化指的是结构发生变化，例如put新键值对，但是某个key对应的value值被覆盖不属于结构变化。 在HashMap中，哈希桶数组table的长度length大小必须为2的n次方(一定是合数)，这是一种非常规的设计，常规的设计是把桶的大小设计为素数。相对来说素数导致冲突的概率要小于合数，具体证明可以参考http://blog.csdn.net/liuqiyao_01/article/details/14475159，Hashtable初始化桶大小为11，就是桶大小设计为素数的应用（Hashtable扩容后不能保证还是素数）。HashMap采用这种非常规设计，主要是为了在取模和扩容时做优化，同时为了减少冲突，HashMap定位哈希桶索引位置时，也加入了高位参与运算的过程。 这里存在一个问题，即使负载因子和Hash算法设计的再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，则会严重影响HashMap的性能。于是，在JDK1.8版本中，对数据结构做了进一步的优化，引入了红黑树。而当链表长度太长（默认超过8）时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高HashMap的性能，其中会用到红黑树的插入、删除、查找等算法。本文不再对红黑树展开讨论，想了解更多红黑树数据结构的工作原理可以参考http://blog.csdn.net/v_july_v/article/details/6105630。 功能实现-方法HashMap的内部功能实现很多，本文主要从根据key获取哈希桶数组索引位置、put方法的详细执行、扩容过程三个具有代表性的点深入展开讲解。 1. 确定哈希桶数组索引位置不管增加、删除、查找键值对，定位到哈希桶数组的位置都是很关键的第一步。前面说过HashMap的数据结构是数组和链表的结合，所以我们当然希望这个HashMap里面的元素位置尽量分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用hash算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，不用遍历链表，大大优化了查询的效率。HashMap定位数组索引位置，直接决定了hash方法的离散性能。先看看源码的实现(方法一+方法二): 1234567891011方法一：static final int hash(Object key) &#123; //jdk1.8 &amp; jdk1.7 int h; // h = key.hashCode() 为第一步 取hashCode值 // h ^ (h &gt;&gt;&gt; 16) 为第二步 高位参与运算 return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);&#125;方法二：static int indexFor(int h, int length) &#123; //jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的 return h &amp; (length-1); //第三步 取模运算&#125; 这里的Hash算法本质上就是三步：取key的hashCode值、高位运算、取模运算。 对于任意给定的对象，只要它的hashCode()返回值相同，那么程序调用方法一所计算得到的Hash码值总是相同的。我们首先想到的就是把hash值对数组长度取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，模运算的消耗还是比较大的，在HashMap中是这样做的：调用方法二来计算该对象应该保存在table数组的哪个索引处。 这个方法非常巧妙，它通过h &amp; (table.length -1)来得到该对象的保存位，而HashMap底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当length总是2的n次方时，h&amp; (length-1)运算等价于对length取模，也就是h%length，但是&amp;比%具有更高的效率。 在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。 下面举例说明下，n为table的长度。 2. 分析HashMap的put方法HashMap的put方法执行过程可以通过下图来理解，自己有兴趣可以去对比源码更清楚地研究学习。 ①.判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容； ②.根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，转向③； ③.判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals； ④.判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤； ⑤.遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可； ⑥.插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩容。 JDK1.8HashMap的put方法源码如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657 1 public V put(K key, V value) &#123; 2 // 对key的hashCode()做hash 3 return putVal(hash(key), key, value, false, true); 4 &#125; 5 6 final V putVal(int hash, K key, V value, boolean onlyIfAbsent, 7 boolean evict) &#123; 8 Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; 9 // 步骤①：tab为空则创建10 if ((tab = table) == null || (n = tab.length) == 0)11 n = (tab = resize()).length;12 // 步骤②：计算index，并对null做处理 13 if ((p = tab[i = (n - 1) &amp; hash]) == null) 14 tab[i] = newNode(hash, key, value, null);15 else &#123;16 Node&lt;K,V&gt; e; K k;17 // 步骤③：节点key存在，直接覆盖value18 if (p.hash == hash &amp;&amp;19 ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))20 e = p;21 // 步骤④：判断该链为红黑树22 else if (p instanceof TreeNode)23 e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);24 // 步骤⑤：该链为链表25 else &#123;26 for (int binCount = 0; ; ++binCount) &#123;27 if ((e = p.next) == null) &#123;28 p.next = newNode(hash, key,value,null); //链表长度大于8转换为红黑树进行处理29 if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st 30 treeifyBin(tab, hash);31 break;32 &#125; // key已经存在直接覆盖value33 if (e.hash == hash &amp;&amp;34 ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) 35 break;36 p = e;37 &#125;38 &#125;39 40 if (e != null) &#123; // existing mapping for key41 V oldValue = e.value;42 if (!onlyIfAbsent || oldValue == null)43 e.value = value;44 afterNodeAccess(e);45 return oldValue;46 &#125;47 &#125;48 ++modCount;49 // 步骤⑥：超过最大容量 就扩容50 if (++size &gt; threshold)51 resize();52 afterNodeInsertion(evict);53 return null;54 &#125; 3. 扩容机制扩容(resize)就是重新计算容量，向HashMap对象里不停的添加元素，而HashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。当然Java里的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组，就像我们用一个小桶装水，如果想装更多的水，就得换大水桶。 我们分析下resize的源码，鉴于JDK1.8融入了红黑树，较复杂，为了便于理解我们仍然使用JDK1.7的代码，好理解一些，本质上区别不大，具体区别后文再说。 12345678910111213 1 void resize(int newCapacity) &#123; //传入新的容量 2 Entry[] oldTable = table; //引用扩容前的Entry数组 3 int oldCapacity = oldTable.length; 4 if (oldCapacity == MAXIMUM_CAPACITY) &#123; //扩容前的数组大小如果已经达到最大(2^30)了 5 threshold = Integer.MAX_VALUE; //修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了 6 return; 7 &#125; 8 9 Entry[] newTable = new Entry[newCapacity]; //初始化一个新的Entry数组10 transfer(newTable); //！！将数据转移到新的Entry数组里11 table = newTable; //HashMap的table属性引用新的Entry数组12 threshold = (int)(newCapacity * loadFactor);//修改阈值13 &#125; 这里就是使用一个容量更大的数组来代替已有的容量小的数组，transfer()方法将原有Entry数组的元素拷贝到新的Entry数组里。 1234567891011121314151617 1 void transfer(Entry[] newTable) &#123; 2 Entry[] src = table; //src引用了旧的Entry数组 3 int newCapacity = newTable.length; 4 for (int j = 0; j &lt; src.length; j++) &#123; //遍历旧的Entry数组 5 Entry&lt;K,V&gt; e = src[j]; //取得旧Entry数组的每个元素 6 if (e != null) &#123; 7 src[j] = null;//释放旧Entry数组的对象引用（for循环后，旧的Entry数组不再引用任何对象） 8 do &#123; 9 Entry&lt;K,V&gt; next = e.next;10 int i = indexFor(e.hash, newCapacity); //！！重新计算每个元素在数组中的位置11 e.next = newTable[i]; //标记[1]12 newTable[i] = e; //将元素放在数组上13 e = next; //访问下一个Entry链上的元素14 &#125; while (e != null);15 &#125;16 &#125;17 &#125; newTable[i]的引用赋给了e.next，也就是使用了单链表的头插入方式，同一位置上新元素总会被放在链表的头部位置；这样先放在一个索引上的元素终会被放到Entry链的尾部(如果发生了hash冲突的话），这一点和Jdk1.8有区别，下文详解。在旧数组中同一条Entry链上的元素，通过重新计算索引位置后，有可能被放到了新数组的不同位置上。 下面举个例子说明下扩容过程。假设了我们的hash算法就是简单的用key mod 一下表的大小（也就是数组的长度）。其中的哈希桶数组table的size=2， 所以key = 3、7、5，put顺序依次为 5、7、3。在mod 2以后都冲突在table[1]这里了。这里假设负载因子 loadFactor=1，即当键值对的实际大小size 大于 table的实际大小时进行扩容。接下来的三个步骤是哈希桶数组 resize成4，然后所有的Node重新rehash的过程。 下面我们讲解下JDK1.8做了哪些优化。经过观测可以发现，我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。看下图可以明白这句话的意思，n为table的长度，图（a）表示扩容前的key1和key2两种key确定索引位置的示例，图（b）表示扩容后key1和key2两种key确定索引位置的示例，其中hash1是key1对应的哈希与高位运算结果。 元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化： 因此，我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图： 这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。有一点注意区别，JDK1.7中rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置，但是从上图可以看出，JDK1.8不会倒置。有兴趣的同学可以研究下JDK1.8的resize源码，写的很赞，如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182 1 final Node&lt;K,V&gt;[] resize() &#123; 2 Node&lt;K,V&gt;[] oldTab = table; 3 int oldCap = (oldTab == null) ? 0 : oldTab.length; 4 int oldThr = threshold; 5 int newCap, newThr = 0; 6 if (oldCap &gt; 0) &#123; 7 // 超过最大值就不再扩充了，就只好随你碰撞去吧 8 if (oldCap &gt;= MAXIMUM_CAPACITY) &#123; 9 threshold = Integer.MAX_VALUE;10 return oldTab;11 &#125;12 // 没超过最大值，就扩充为原来的2倍13 else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;14 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)15 newThr = oldThr &lt;&lt; 1; // double threshold16 &#125;17 else if (oldThr &gt; 0) // initial capacity was placed in threshold18 newCap = oldThr;19 else &#123; // zero initial threshold signifies using defaults20 newCap = DEFAULT_INITIAL_CAPACITY;21 newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);22 &#125;23 // 计算新的resize上限24 if (newThr == 0) &#123;25 26 float ft = (float)newCap * loadFactor;27 newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?28 (int)ft : Integer.MAX_VALUE);29 &#125;30 threshold = newThr;31 @SuppressWarnings(&#123;"rawtypes"，"unchecked"&#125;)32 Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];33 table = newTab;34 if (oldTab != null) &#123;35 // 把每个bucket都移动到新的buckets中36 for (int j = 0; j &lt; oldCap; ++j) &#123;37 Node&lt;K,V&gt; e;38 if ((e = oldTab[j]) != null) &#123;39 oldTab[j] = null;40 if (e.next == null)41 newTab[e.hash &amp; (newCap - 1)] = e;42 else if (e instanceof TreeNode)43 ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);44 else &#123; // 链表优化重hash的代码块45 Node&lt;K,V&gt; loHead = null, loTail = null;46 Node&lt;K,V&gt; hiHead = null, hiTail = null;47 Node&lt;K,V&gt; next;48 do &#123;49 next = e.next;50 // 原索引51 if ((e.hash &amp; oldCap) == 0) &#123;52 if (loTail == null)53 loHead = e;54 else55 loTail.next = e;56 loTail = e;57 &#125;58 // 原索引+oldCap59 else &#123;60 if (hiTail == null)61 hiHead = e;62 else63 hiTail.next = e;64 hiTail = e;65 &#125;66 &#125; while ((e = next) != null);67 // 原索引放到bucket里68 if (loTail != null) &#123;69 loTail.next = null;70 newTab[j] = loHead;71 &#125;72 // 原索引+oldCap放到bucket里73 if (hiTail != null) &#123;74 hiTail.next = null;75 newTab[j + oldCap] = hiHead;76 &#125;77 &#125;78 &#125;79 &#125;80 &#125;81 return newTab;82 &#125; 线程安全性在多线程使用场景中，应该尽量避免使用线程不安全的HashMap，而使用线程安全的ConcurrentHashMap。那么为什么说HashMap是线程不安全的，下面举例子说明在并发的多线程使用场景中使用HashMap可能造成死循环。代码例子如下(便于理解，仍然使用JDK1.7的环境)： 1234567891011121314151617181920public class HashMapInfiniteLoop &#123; private static HashMap&lt;Integer,String&gt; map = new HashMap&lt;Integer,String&gt;(2，0.75f); public static void main(String[] args) &#123; map.put(5， "C"); new Thread("Thread1") &#123; public void run() &#123; map.put(7, "B"); System.out.println(map); &#125;; &#125;.start(); new Thread("Thread2") &#123; public void run() &#123; map.put(3, "A); System.out.println(map); &#125;; &#125;.start(); &#125; &#125; 其中，map初始化为一个长度为2的数组，loadFactor=0.75，threshold=2*0.75=1，也就是说当put第二个key的时候，map就需要进行resize。 通过设置断点让线程1和线程2同时debug到transfer方法(3.3小节代码块)的首行。注意此时两个线程已经成功添加数据。放开thread1的断点至transfer方法的“Entry next = e.next;” 这一行；然后放开线程2的的断点，让线程2进行resize。结果如下图。 注意，Thread1的 e 指向了key(3)，而next指向了key(7)，其在线程二rehash后，指向了线程二重组后的链表。 线程一被调度回来执行，先是执行 newTalbe[i] = e， 然后是e = next，导致了e指向了key(7)，而下一次循环的next = e.next导致了next指向了key(3)。 e.next = newTable[i] 导致 key(3).next 指向了 key(7)。注意：此时的key(7).next 已经指向了key(3)， 环形链表就这样出现了。 于是，当我们用线程一调用map.get(11)时，悲剧就出现了——Infinite Loop。 JDK1.8与JDK1.7的性能对比HashMap中，如果key经过hash算法得出的数组索引位置全部不相同，即Hash算法非常好，那样的话，getKey方法的时间复杂度就是O(1)，如果Hash算法技术的结果碰撞非常多，假如Hash算极其差，所有的Hash算法结果得出的索引位置一样，那样所有的键值对都集中到一个桶中，或者在一个链表中，或者在一个红黑树中，时间复杂度分别为O(n)和O(lgn)。 鉴于JDK1.8做了多方面的优化，总体性能优于JDK1.7，下面我们从两个方面用例子证明这一点。 Hash较均匀的情况为了便于测试，我们先写一个类Key，如下： 123456789101112131415161718192021222324252627class Key implements Comparable&lt;Key&gt; &#123; private final int value; Key(int value) &#123; this.value = value; &#125; @Override public int compareTo(Key o) &#123; return Integer.compare(this.value, o.value); &#125; @Override public boolean equals(Object o) &#123; if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Key key = (Key) o; return value == key.value; &#125; @Override public int hashCode() &#123; return value; &#125;&#125; 这个类复写了equals方法，并且提供了相当好的hashCode函数，任何一个值的hashCode都不会相同，因为直接使用value当做hashcode。为了避免频繁的GC，我将不变的Key实例缓存了起来，而不是一遍一遍的创建它们。代码如下： 123456789101112131415public class Keys &#123; public static final int MAX_KEY = 10_000_000; private static final Key[] KEYS_CACHE = new Key[MAX_KEY]; static &#123; for (int i = 0; i &lt; MAX_KEY; ++i) &#123; KEYS_CACHE[i] = new Key(i); &#125; &#125; public static Key of(int value) &#123; return KEYS_CACHE[value]; &#125;&#125; 现在开始我们的试验，测试需要做的仅仅是，创建不同size的HashMap（1、10、100、……10000000），屏蔽了扩容的情况，代码如下： 1234567891011121314151617181920static void test(int mapSize) &#123; HashMap&lt;Key, Integer&gt; map = new HashMap&lt;Key,Integer&gt;(mapSize); for (int i = 0; i &lt; mapSize; ++i) &#123; map.put(Keys.of(i), i); &#125; long beginTime = System.nanoTime(); //获取纳秒 for (int i = 0; i &lt; mapSize; i++) &#123; map.get(Keys.of(i)); &#125; long endTime = System.nanoTime(); System.out.println(endTime - beginTime); &#125; public static void main(String[] args) &#123; for(int i=10;i&lt;= 1000 0000;i*= 10)&#123; test(i); &#125; &#125; 在测试中会查找不同的值，然后度量花费的时间，为了计算getKey的平均时间，我们遍历所有的get方法，计算总的时间，除以key的数量，计算一个平均值，主要用来比较，绝对值可能会受很多环境因素的影响。结果如下： 通过观测测试结果可知，JDK1.8的性能要高于JDK1.7 15%以上，在某些size的区域上，甚至高于100%。由于Hash算法较均匀，JDK1.8引入的红黑树效果不明显，下面我们看看Hash不均匀的的情况。 Hash极不均匀的情况假设我们又一个非常差的Key，它们所有的实例都返回相同的hashCode值。这是使用HashMap最坏的情况。代码修改如下： 123456789class Key implements Comparable&lt;Key&gt; &#123; //... @Override public int hashCode() &#123; return 1; &#125;&#125; 仍然执行main方法，得出的结果如下表所示： 从表中结果中可知，随着size的变大，JDK1.7的花费时间是增长的趋势，而JDK1.8是明显的降低趋势，并且呈现对数增长稳定。当一个链表太长的时候，HashMap会动态的将它替换成一个红黑树，这话的话会将时间复杂度从O(n)降为O(logn)。hash算法均匀和不均匀所花费的时间明显也不相同，这两种情况的相对比较，可以说明一个好的hash算法的重要性。 ​ 测试环境：处理器为2.2 GHz Intel Core i7，内存为16 GB 1600 MHz DDR3，SSD硬盘，使用默认的JVM参数，运行在64位的OS X 10.10.1上。 小结(1) 扩容是一个特别耗性能的操作，所以当程序员在使用HashMap的时候，估算map的大小，初始化的时候给一个大致的数值，避免map进行频繁的扩容。 (2) 负载因子是可以修改的，也可以大于1，但是建议不要轻易修改，除非情况非常特殊。 (3) HashMap是线程不安全的，不要在并发的环境中同时操作HashMap，建议使用ConcurrentHashMap。 (4) JDK1.8引入红黑树大程度优化了HashMap的性能。 (5) 还没升级JDK1.8的，现在开始升级吧。HashMap的性能提升仅仅是JDK1.8的冰山一角。 参考 JDK1.7&amp;JDK1.8 源码。 CSDN博客频道，HashMap多线程死循环问题，2014。 红黑联盟，Java类集框架之HashMap(JDK1.8)源码剖析，2015。 CSDN博客频道， 教你初步了解红黑树，2010。 Java Code Geeks，HashMap performance improvements in Java 8，2014。 Importnew，危险！在HashMap中将可变对象用作Key，2014。 CSDN博客频道，为什么一般hashtable的桶数会取一个素数，2013。 原文地址: http://tech.meituan.com/java-hashmap.html — 美团点评技术博客]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring 集成数据源 HiKariCP]]></title>
    <url>%2F2017%2F05%2F12%2Fspring-%E9%9B%86%E6%88%90%E6%95%B0%E6%8D%AE%E6%BA%90-HiKariCP%2F</url>
    <content type="text"><![CDATA[前言摘自Github Fast, simple, reliable. HikariCP is a “zero-overhead” production ready JDBC connection pool. At roughly 130Kb, the library is very light. Read about how we do it here. 官网：https://github.com/brettwooldridge/HikariCP 具体的xml配置 123456789101112131415161718192021222324252627282930313233343536373839&lt;!-- Hikari Datasource --&gt; &lt;bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close"&gt; &lt;!-- mysql 不要使用 --&gt; &lt;!--&lt;property name="dataSourceClassName" value="$&#123;hikari.datasource.dataSourceClassName&#125;" /&gt;--&gt; &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt; &lt;property name="jdbcUrl" value="jdbc:mysql://xxxxxxx:3306?useUnicode=true&amp;characterEncoding=UTF-8&amp;useConfigs=maxPerformance" /&gt; &lt;property name="username" value="xxx" /&gt; &lt;property name="password" value="xxx" /&gt; &lt;!-- 等待连接池分配连接的最大时长(毫秒), 超过这个时长还没可用的连接则发生SQLException, 缺省:30秒 --&gt; &lt;property name="connectionTimeout" value="30000" /&gt; &lt;!-- 一个连接idle状态的最大时长(毫秒), 超时则被释放(retired), 缺省:10分钟 --&gt; &lt;property name="idleTimeout" value="600000" /&gt; &lt;!-- 一个连接的生命时长(毫秒), 超时而且没被使用则被释放, 缺省:30分钟, 建议设置比数据库超时时长少30秒, 参考MySQL wait_timeout参数(show variables like '%timeout%';) --&gt; &lt;property name="maxLifetime" value="1800000" /&gt; &lt;!-- 最小空闲数 为了最大限度地提高性能和响应速度，我们建议不要设置此值 --&gt; &lt;!--&lt;property name="minimumIdle" value="5" /&gt;--&gt; &lt;!-- 连接池中允许的最大连接数。缺省值: 10; 推荐的公式: ((core_count * 2) + effective_spindle_count) --&gt; &lt;property name="maximumPoolSize" value="10" /&gt; &lt;!-- 连接只读数据库时配置为true, 保证安全 --&gt; &lt;property name="readOnly" value="false" /&gt; &lt;!-- 检查连接语句, 如果驱动程序支持JDBC4, 我们强烈建议您不要设置此属性 --&gt; &lt;!--&lt;property name="connectionTestQuery" value="SELECT 1" /&gt;--&gt; &lt;property name="dataSourceProperties"&gt; &lt;props&gt; &lt;prop key="cachePrepStmts"&gt;true&lt;/prop&gt; &lt;prop key="prepStmtCacheSize"&gt;250&lt;/prop&gt; &lt;prop key="prepStmtCacheSqlLimit"&gt;2048&lt;/prop&gt; &lt;prop key="useServerPrepStmts"&gt;true&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt; &lt;/bean&gt; PS: 先放全部配置吧，以后有空说明下各个参数的意思…..]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>HiKariCP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring 集成 httpclient]]></title>
    <url>%2F2017%2F04%2F25%2Fspring-%E9%9B%86%E6%88%90-httpclient%2F</url>
    <content type="text"><![CDATA[前言httpclient 介绍 The Hyper-Text Transfer Protocol (HTTP) is perhaps the most significant protocol used on the Internet today. Web services, network-enabled appliances and the growth of network computing continue to expand the role of the HTTP protocol beyond user-driven web browsers, while increasing the number of applications that require HTTP support.Although the java.net package provides basic functionality for accessing resources via HTTP, it doesn’t provide the full flexibility or functionality needed by many applications. HttpClient seeks to fill this void by providing an efficient, up-to-date, and feature-rich package implementing the client side of the most recent HTTP standards and recommendations.Designed for extension while providing robust support for the base HTTP protocol, HttpClient may be of interest to anyone building HTTP-aware client applications such as web browsers, web service clients, or systems that leverage or extend the HTTP protocol for distributed communication. 准备工作在pom.xml文件中增加以下依赖1234567891011&lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt; &lt;version&gt;4.5.3&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; 书写配置类 用@Configuration注解该类，等价与XML中配置beans；用@Bean标注方法等价于XML中配置bean。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667@Configurationpublic class HttpConfiguration &#123; @Bean public LayeredConnectionSocketFactory sslSF() &#123; LayeredConnectionSocketFactory sslSF = null; try &#123; KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType()); //信任任何链接 SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(trustStore, new TrustStrategy() &#123; @Override public boolean isTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException &#123; return true; &#125; &#125;).build(); return new SSLConnectionSocketFactory(sslContext, NoopHostnameVerifier.INSTANCE); &#125; catch (KeyStoreException e) &#123; e.printStackTrace(); &#125; catch (NoSuchAlgorithmException e) &#123; e.printStackTrace(); &#125; catch (KeyManagementException e) &#123; e.printStackTrace(); &#125; return sslSF; &#125; @Bean public Registry&lt;ConnectionSocketFactory&gt; registryBuilder() &#123; return RegistryBuilder.&lt;ConnectionSocketFactory&gt;create() .register("https", sslSF()) .register("http", new PlainConnectionSocketFactory()) .build(); &#125; @Bean public PoolingHttpClientConnectionManager connectionManager() &#123; PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(registryBuilder()); connectionManager.setMaxTotal(500); connectionManager.setDefaultMaxPerRoute(500); return connectionManager; &#125; @Bean public CloseableHttpClient httpClient() &#123; return HttpClients.custom() .setConnectionManager(connectionManager()) .build(); &#125; @Bean public RequestConfig requestConfig() &#123; return RequestConfig.custom() .setConnectTimeout(10000) .setConnectionRequestTimeout(500) .setSocketTimeout(10000) .build(); &#125; @Bean(destroyMethod = "shutdown") public IdleConnectionEvictor idleConnectionEvictor() &#123; return new IdleConnectionEvictor(connectionManager()); &#125;&#125; 定期清理无效的http连接1234567891011121314151617181920212223242526272829303132333435public class IdleConnectionEvictor extends Thread &#123; private final HttpClientConnectionManager connMgr; private volatile boolean shutdown; public IdleConnectionEvictor(HttpClientConnectionManager connMgr) &#123; super(); this.connMgr = connMgr; // 启动当前线程 this.start(); &#125; @Override public void run() &#123; try &#123; while (!shutdown) &#123; synchronized (this) &#123; wait(5000); // 关闭失效的连接 connMgr.closeExpiredConnections(); &#125; &#125; &#125; catch (InterruptedException ex) &#123; // 结束 &#125; &#125; public void shutdown() &#123; shutdown = true; synchronized (this) &#123; notifyAll(); &#125; &#125;&#125; 工具类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234@Componentpublic class HttpClientUtil &#123; private static final Logger logger = LoggerFactory.getLogger(HttpClientUtil.class); @Resource private CloseableHttpClient httpClient; @Resource private RequestConfig requestConfig; /** * get * * @param url 请求的url * @param queries 请求的参数，在浏览器？后面的数据，没有可以传null * @return */ public String get(String url, Map&lt;String, String&gt; queries) &#123; String responseBody = ""; //支持https StringBuffer sb = new StringBuffer(url); if (queries != null &amp;&amp; queries.keySet().size() &gt; 0) &#123; boolean firstFlag = true; Iterator iterator = queries.entrySet().iterator(); while (iterator.hasNext()) &#123; Map.Entry entry = (Map.Entry&lt;String, String&gt;) iterator.next(); if (firstFlag) &#123; sb.append("?" + entry.getKey() + "=" + entry.getValue()); firstFlag = false; &#125; else &#123; sb.append("&amp;" + entry.getKey() + "=" + entry.getValue()); &#125; &#125; &#125; HttpGet httpGet = new HttpGet(sb.toString()); //设置超时 httpGet.setConfig(this.requestConfig); //请求数据 CloseableHttpResponse response = null; try &#123; response = this.httpClient.execute(httpGet); int status = response.getStatusLine().getStatusCode(); if (status == HttpStatus.SC_OK) &#123; HttpEntity entity = response.getEntity(); responseBody = EntityUtils.toString(entity);// EntityUtils.consume(response.getEntity()); //会自动释放连接 &#125; &#125; catch (Exception ex) &#123; logger.error("http error &gt;&gt; ex = &#123;&#125;", ExceptionUtils.getStackTrace(ex)); &#125; finally &#123; if (response != null) &#123; try &#123; response.close(); &#125; catch (IOException e) &#123; logger.error("http close error &gt;&gt; ex = &#123;&#125;", ExceptionUtils.getStackTrace(e)); &#125; &#125; &#125; return responseBody; &#125; /** * get * * @param url 请求的url * @param queries 请求的参数，在浏览器？后面的数据，没有可以传null * @return */ public File getFile(String url, Map&lt;String, String&gt; queries, File file) &#123; //支持https StringBuffer sb = new StringBuffer(url); if (queries != null &amp;&amp; queries.keySet().size() &gt; 0) &#123; boolean firstFlag = true; Iterator iterator = queries.entrySet().iterator(); while (iterator.hasNext()) &#123; Map.Entry entry = (Map.Entry&lt;String, String&gt;) iterator.next(); if (firstFlag) &#123; sb.append("?" + entry.getKey() + "=" + entry.getValue()); firstFlag = false; &#125; else &#123; sb.append("&amp;" + entry.getKey() + "=" + entry.getValue()); &#125; &#125; &#125; HttpGet httpGet = new HttpGet(sb.toString()); //设置超时 httpGet.setConfig(this.requestConfig); //请求数据 CloseableHttpResponse response = null; try &#123; response = this.httpClient.execute(httpGet); int status = response.getStatusLine().getStatusCode(); if (status == HttpStatus.SC_OK) &#123; HttpEntity entity = response.getEntity(); BufferedInputStream bis = new BufferedInputStream(entity.getContent()); if (bis.available() &lt; 1024) &#123; bis.close(); return null; &#125; FileOutputStream fos = new FileOutputStream(file); byte[] buf = new byte[1024]; int size = 0; while ((size = bis.read(buf)) != -1) &#123; fos.write(buf, 0, size); &#125; fos.close(); bis.close(); &#125; &#125; catch (Exception ex) &#123; logger.error("http error &gt;&gt; ex = &#123;&#125;", ExceptionUtils.getStackTrace(ex)); file.delete(); return null; &#125; finally &#123; if (response != null) &#123; try &#123; response.close(); &#125; catch (IOException e) &#123; logger.error("http close error &gt;&gt; ex = &#123;&#125;", ExceptionUtils.getStackTrace(e)); &#125; &#125; &#125; return file; &#125; /** * post * * @param url 请求的url * @param queries 请求的参数，在浏览器？后面的数据，没有可以传null * @param params post form 提交的参数 * @return */ public String post(String url, Map&lt;String, String&gt; queries, Map&lt;String, String&gt; params) &#123; String responseBody = ""; StringBuffer sb = new StringBuffer(url); if (queries != null &amp;&amp; queries.keySet().size() &gt; 0) &#123; boolean firstFlag = true; Iterator iterator = queries.entrySet().iterator(); while (iterator.hasNext()) &#123; Map.Entry&lt;String, String&gt; entry = (Map.Entry&lt;String, String&gt;) iterator.next(); if (firstFlag) &#123; sb.append("?" + entry.getKey() + "=" + entry.getValue()); firstFlag = false; &#125; else &#123; sb.append("&amp;" + entry.getKey() + "=" + entry.getValue()); &#125; &#125; &#125; //指定url,和http方式 HttpPost httpPost = new HttpPost(sb.toString()); httpPost.setConfig(this.requestConfig); //添加参数 List&lt;NameValuePair&gt; nvps = new ArrayList&lt;&gt;(); if (params != null &amp;&amp; params.keySet().size() &gt; 0) &#123; for (String key : params.keySet()) &#123; nvps.add(new BasicNameValuePair(key, params.get(key))); &#125; &#125; httpPost.setEntity(new UrlEncodedFormEntity(nvps, Consts.UTF_8)); //请求数据 CloseableHttpResponse response = null; try &#123; response = this.httpClient.execute(httpPost); if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123; HttpEntity entity = response.getEntity(); responseBody = EntityUtils.toString(entity);// EntityUtils.consume(response.getEntity()); //会自动释放连接 &#125; &#125; catch (IOException ex) &#123; logger.error("http error &gt;&gt; ex = &#123;&#125;", ExceptionUtils.getStackTrace(ex)); &#125; finally &#123; if (response != null) &#123; try &#123; response.close(); &#125; catch (IOException e) &#123; logger.error("http close error &gt;&gt; ex = &#123;&#125;", ExceptionUtils.getStackTrace(e)); &#125; &#125; &#125; return responseBody; &#125; /** * post * * @param url 请求的url * @param data post json 提交的参数 * @return */ public String post(String url, String data) &#123; String responseBody = ""; StringBuffer sb = new StringBuffer(url); //指定url,和http方式 HttpPost httpPost = new HttpPost(sb.toString()); httpPost.setConfig(this.requestConfig); //设置类型 StringEntity se = new StringEntity(data, "utf-8"); se.setContentEncoding(new BasicHeader(HTTP.CONTENT_TYPE, "application/json")); httpPost.setEntity(se); //请求数据 CloseableHttpResponse response = null; try &#123; response = this.httpClient.execute(httpPost); if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123; HttpEntity entity = response.getEntity(); responseBody = EntityUtils.toString(entity); &#125; &#125; catch (IOException ex) &#123; logger.error("http post error &gt;&gt; ex = &#123;&#125;", ExceptionUtils.getStackTrace(ex)); &#125; finally &#123; if (response != null) &#123; try &#123; response.close(); &#125; catch (IOException e) &#123; logger.error("http post close error &gt;&gt; ex = &#123;&#125;", ExceptionUtils.getStackTrace(e)); &#125; &#125; &#125; return responseBody; &#125;&#125; 使用方法12@Resourceprivate HttpClientUtil httpClientUtil;]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>httpclient</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不同版本(2.5-3.1) web.xml文件的schema头部声明]]></title>
    <url>%2F2017%2F04%2F25%2F%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC-2-5-3-1-web-xml%E6%96%87%E4%BB%B6%E7%9A%84schema%E5%A4%B4%E9%83%A8%E5%A3%B0%E6%98%8E%2F</url>
    <content type="text"><![CDATA[项目用的容器是tomcat8, tomcat8 默认的是servlet 3.1的版本, 看了下 web.xml还是3.0的版本, 所以升级了下, 顺便贴一下2.5到3.1的schema头部声明。 1. Servlet 3.1Java EE 7 XML schema，命名空间是 http://xmlns.jcp.org/xml/ns/javaee/ 1234567&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1"&gt;&lt;/web-app&gt; 2. Servlet 3.0Java EE 6 XML schema，命名空间是 http://java.sun.com/xml/ns/javaee 1234567&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0"&gt;&lt;/web-app&gt; 3. Servlet 2.5Java EE 5 XML schema，命名空间是 http://java.sun.com/xml/ns/javaee 1234567&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5"&gt;&lt;/web-app&gt;]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>web.xml</tag>
        <tag>servlet</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring 集成 okhttp3]]></title>
    <url>%2F2017%2F04%2F21%2Fspring-%E9%9B%86%E6%88%90-okhttp3%2F</url>
    <content type="text"><![CDATA[前言okhttp 介绍 HTTP is the way modern applications network. It’s how we exchange data &amp; media. &gt;Doing HTTP efficiently makes your stuff load faster and saves bandwidth. OkHttp is an HTTP client that’s efficient by default: HTTP/2 support allows all requests to the same host to share a socket. Connection pooling reduces request latency (if HTTP/2 isn’t available). Transparent GZIP shrinks download sizes. Response caching avoids the network completely for repeat requests. OkHttp perseveres when the network is troublesome: it will silently recover from &gt; &gt;common connection problems. If your service has multiple IP addresses OkHttp will &gt;attempt alternate addresses if the first connect fails. This is necessary for IPv4+IPv6 &gt;and for services hosted in redundant data centers. OkHttp initiates new connections &gt;with modern TLS features (SNI, ALPN), and falls back to TLS 1.0 if the handshake fails. Using OkHttp is easy. Its request/response API is designed with fluent builders and immutability. It supports both synchronous blocking calls and async calls with callbacks. OkHttp supports Android 2.3 and above. For Java, the minimum requirement is 1.7. —摘自 https://square.github.io/okhttp/ 准备工作在pom.xml文件中增加以下依赖12345&lt;dependency&gt; &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt; &lt;artifactId&gt;okhttp&lt;/artifactId&gt; &lt;version&gt;3.6.0&lt;/version&gt;&lt;/dependency&gt; 书写配置类 用@Configuration注解该类，等价与XML中配置beans；用@Bean标注方法等价于XML中配置bean。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960@Configurationpublic class OkHttpConfiguration &#123; @Bean public X509TrustManager x509TrustManager() &#123; return new X509TrustManager() &#123; @Override public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException &#123; &#125; @Override public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException &#123; &#125; @Override public X509Certificate[] getAcceptedIssuers() &#123; return new X509Certificate[0]; &#125; &#125;; &#125; @Bean public SSLSocketFactory sslSocketFactory() &#123; try &#123; //信任任何链接 SSLContext sslContext = SSLContext.getInstance("TLS"); sslContext.init(null, new TrustManager[]&#123;x509TrustManager()&#125;, new SecureRandom()); return sslContext.getSocketFactory(); &#125; catch (NoSuchAlgorithmException e) &#123; e.printStackTrace(); &#125; catch (KeyManagementException e) &#123; e.printStackTrace(); &#125; return null; &#125; /** * Create a new connection pool with tuning parameters appropriate for a single-user application. * The tuning parameters in this pool are subject to change in future OkHttp releases. Currently */ @Bean public ConnectionPool pool() &#123; return new ConnectionPool(200, 5, TimeUnit.MINUTES); &#125; @Bean public OkHttpClient okHttpClient() &#123; return new OkHttpClient.Builder() .sslSocketFactory(sslSocketFactory(), x509TrustManager()) .retryOnConnectionFailure(false)//是否开启缓存 .connectionPool(pool())//连接池 .connectTimeout(10L, TimeUnit.SECONDS) .readTimeout(10L, TimeUnit.SECONDS) .build(); &#125;&#125; 工具类 自己写的工具类，比较简单，不是REST风格 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147@Componentpublic class OkHttpUtil &#123; private static final Logger logger = LoggerFactory.getLogger(OkHttpUtil.class); @Resource private OkHttpClient okHttpClient; /** * get * * @param url 请求的url * @param queries 请求的参数，在浏览器？后面的数据，没有可以传null * @return */ public String get(String url, Map&lt;String, String&gt; queries) &#123; String responseBody = ""; StringBuffer sb = new StringBuffer(url); if (queries != null &amp;&amp; queries.keySet().size() &gt; 0) &#123; boolean firstFlag = true; Iterator iterator = queries.entrySet().iterator(); while (iterator.hasNext()) &#123; Map.Entry entry = (Map.Entry&lt;String, String&gt;) iterator.next(); if (firstFlag) &#123; sb.append("?" + entry.getKey() + "=" + entry.getValue()); firstFlag = false; &#125; else &#123; sb.append("&amp;" + entry.getKey() + "=" + entry.getValue()); &#125; &#125; &#125; Request request = new Request .Builder() .url(sb.toString()) .build(); Response response = null; try &#123; response = okHttpClient.newCall(request).execute(); int status = response.code(); if (status == 200) &#123; return response.body().string(); &#125; &#125; catch (Exception e) &#123; logger.error("okhttp put error &gt;&gt; ex = &#123;&#125;", ExceptionUtils.getStackTrace(e)); &#125; finally &#123; if (response != null) &#123; response.close(); &#125; &#125; return responseBody; &#125; /** * post * * @param url 请求的url * @param params post form 提交的参数 * @return */ public String post(String url, Map&lt;String, String&gt; params) &#123; String responseBody = ""; FormBody.Builder builder = new FormBody.Builder(); //添加参数 if (params != null &amp;&amp; params.keySet().size() &gt; 0) &#123; for (String key : params.keySet()) &#123; builder.add(key, params.get(key)); &#125; &#125; Request request = new Request .Builder() .url(url) .post(builder.build()) .build(); Response response = null; try &#123; response = okHttpClient.newCall(request).execute(); int status = response.code(); if (status == 200) &#123; return response.body().string(); &#125; &#125; catch (Exception e) &#123; logger.error("okhttp post error &gt;&gt; ex = &#123;&#125;", ExceptionUtils.getStackTrace(e)); &#125; finally &#123; if (response != null) &#123; response.close(); &#125; &#125; return responseBody; &#125; /** * post 上传文件 * * @param url * @param params * @param fileType * @return */ public String postFile(String url, Map&lt;String, Object&gt; params, String fileType) &#123; String responseBody = ""; MultipartBody.Builder builder = new MultipartBody.Builder(); //添加参数 if (params != null &amp;&amp; params.keySet().size() &gt; 0) &#123; for (String key : params.keySet()) &#123; if (params.get(key) instanceof File) &#123; File file = (File) params.get(key); builder.addFormDataPart(key, file.getName(), RequestBody.create(MediaType.parse(fileType), file)); continue; &#125; builder.addFormDataPart(key, params.get(key).toString()); &#125; &#125; Request request = new Request .Builder() .url(url) .post(builder.build()) .build(); Response response = null; try &#123; response = okHttpClient.newCall(request).execute(); int status = response.code(); if (status == 200) &#123; return response.body().string(); &#125; &#125; catch (Exception e) &#123; logger.error("okhttp postFile error &gt;&gt; ex = &#123;&#125;", ExceptionUtils.getStackTrace(e)); &#125; finally &#123; if (response != null) &#123; response.close(); &#125; &#125; return responseBody; &#125;&#125; 使用方法12@Resourceprivate OkHttpUtil okHttpUtil;]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>okhttp3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring 集成 websocket]]></title>
    <url>%2F2017%2F04%2F21%2Fspring-%E9%9B%86%E6%88%90-websocket%2F</url>
    <content type="text"><![CDATA[spring4.0以后加入了对websocket技术的支持，目前项目用的是SSM（springMVC+spring+MyBatis）框架，所以选择了spring自带的websocket。 开始集成:在pom.xml文件中增加以下依赖12345678910111213141516&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-websocket&lt;/artifactId&gt; &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-messaging&lt;/artifactId&gt; &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;javax.websocket&lt;/groupId&gt; &lt;artifactId&gt;javax.websocket-api&lt;/artifactId&gt; &lt;version&gt;1.1&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt; 握手拦截器12345678910111213141516171819public class WebSocketHandshakeInterceptor extends HttpSessionHandshakeInterceptor &#123; @Override public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map&lt;String, Object&gt; attributes) throws Exception &#123; if (request instanceof ServletServerHttpRequest) &#123; String openid = ((ServletServerHttpRequest) request).getServletRequest().getParameter("openid"); attributes.put("WEBSOCKET_USERNAME", openid); &#125; return super.beforeHandshake(request, response, wsHandler, attributes); &#125; @Override public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception ex) &#123; super.afterHandshake(request, response, wsHandler, ex); &#125;&#125; 业务拦截器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475public class UnionpaySocketHandler extends TextWebSocketHandler &#123; private static final Logger logger = LoggerFactory.getLogger(UnionpaySocketHandler.class); private final static ConcurrentMap&lt;String, WebSocketSession&gt; sessions; static &#123; sessions = new ConcurrentHashMap&lt;&gt;(); &#125; //接收文本消息，并发送出去 @Override protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception &#123; String msg = message.getPayload(); TextMessage returnMessage = new TextMessage(msg); session.sendMessage(returnMessage); super.handleTextMessage(session, message); &#125; //连接建立后处理 @Override public void afterConnectionEstablished(WebSocketSession session) throws Exception &#123; String openid = (String) session.getAttributes().get("WEBSOCKET_USERNAME"); if (StringUtils.isNotBlank(openid)) &#123; logger.info("用户 &gt;&gt; &#123;&#125; 建立连接", openid); sessions.put(openid, session); &#125; &#125; //抛出异常时处理 @Override public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception &#123; if (session.isOpen()) &#123; session.close(); &#125; String openid = (String) session.getAttributes().get("WEBSOCKET_USERNAME"); sessions.remove(openid); &#125; //连接关闭后处理 @Override public void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) throws Exception &#123; String openid = (String) session.getAttributes().get("WEBSOCKET_USERNAME"); logger.info("用户 &gt;&gt; &#123;&#125; 退出连接", openid); sessions.remove(openid); &#125; /** * 给某个用户发送消息 * * @param userName * @param msg */ public void sendMessageToUser(String userName, String msg) &#123; WebSocketSession session = sessions.get(userName); if (session != null) &#123; try &#123; TextMessage message = new TextMessage(msg); session.sendMessage(message); &#125; catch (IOException e) &#123; logger.error("发送信息异常, ex = &#123;&#125;", ExceptionUtils.getStackTrace(e)); &#125; &#125; &#125;&#125; 配置类12345678910111213141516171819202122232425262728@Configuration@EnableWebSocketpublic class WebSocketConfiguration implements WebSocketConfigurer &#123; @Override public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) &#123; registry .addHandler(unionpaySocketHandler(), "/unionpayServer") .setAllowedOrigins("*")//允许所有域访问 .addInterceptors(myInterceptor()); registry .addHandler(unionpaySocketHandler(), "/unionpayServer/sockjs") .setAllowedOrigins("*") .addInterceptors(myInterceptor()) .withSockJS(); &#125; @Bean public UnionpaySocketHandler unionpaySocketHandler() &#123; return new UnionpaySocketHandler(); &#125; @Bean public WebSocketHandshakeInterceptor myInterceptor() &#123; return new WebSocketHandshakeInterceptor(); &#125;&#125; web.xml增加配置12345678910&lt;servlet&gt; &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath*:spring/spring-mvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; **&lt;async-supported&gt;true&lt;/async-supported&gt;//需要增加此项 允许异步(未测试是否必须配置)&lt;/servlet&gt; 以下重点如果使用了nginx做代理，则nginx需要增加配置，否则websocket开启会报错301或者400或者500等 以下为例子 1234567location /websocket &#123; proxy_pass http://127.0.0.1:9090/unionpayServer; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection "upgrade"; proxy_read_timeout 300s;&#125; 前端调用方法示例1websocket = new WebSocket("ws://localhost:8080/websocket?openid=123");//如果为https,ws改为wss 至此，整个websocket集成配置已完成。]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F04%2F20%2Fhello%20world%2F</url>
    <content type="text"><![CDATA[Hello, this world！ 没有啦~~~]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>闲谈</tag>
      </tags>
  </entry>
</search>
